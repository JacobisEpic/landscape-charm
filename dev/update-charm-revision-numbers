#!/usr/bin/python3

import argparse
import fileinput
import re
import sys
from urllib.request import urlopen
from yaml import load


class Charm(object):

    def __init__(self, charm_name, series="precise"):
        """Create a charm object.
        @param name of charm
        """
        reference = "cs:{}/{}".format(series, charm_name)
        base_url = "https://store.juju.ubuntu.com/charm-info?charms="
        url = "{}{}".format(base_url, reference)
        response = urlopen(url)
        self.charm_data = load(response)[reference]
        self.name = charm_name
        assert self.charm_data.get("errors"), self.charm_data["errors"]
        self.revision = self.charm_data['revision']


def replace_in_config(charms, series="precise"):
    """
    Iterate over each charm, replacing all occurances of old charm store
    urls with new versions.  Intent is to leave file in a state that can
    be tested and checked in if successful.

    Look for lines like:

      charm: cs:precise/juju-gui-83

    Replace the digit at the end with the latest rev.
    """
    filename = "config/landscape-deployments.yaml"
    for line in fileinput.input(filename, inplace=1):
        for charm in charms:
            pattern = re.compile(
                "(^.*cs:{}/{})-[0-9]+".format(series, charm.name))
            replace = r"\1-{}".format(charm.revision)
            line = re.sub(pattern, replace, line.rstrip("\n"))
        print(line)

    print("#")
    print("# New config written, use `bzr diff` to see changes (if any)")


def get_options():
    """Parse and return command line options."""
    description = "Put new charmstore descriptors into a deployer file."
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("charms",
        help="List charms to update", nargs='*')
    return parser.parse_args()

def main():
    options = get_options()
    charms = []
    if len(options.charms):
        print("# Latest upstream versions of charms: ")
    for charm_name in options.charms:
        charm = Charm(charm_name)
        print("#   {}: {}".format(charm_name,charm.revision))
        charms.append(charm)
    replace_in_config(charms)

    sys.exit(0)

if __name__ == "__main__":
    main()
