#!/usr/bin/python2.7
"""
Write out a 'translated' configuration file.  That is:

  - put everything in one section
  - resolve 'include-*://' style links
  - name the yaml section after the current 'JUJU_ENV'

This is to workaround some amulet/deployer quirks.  It's in a file
since deployer libs are py2, and amulet is py3
"""


import os
import sys
import subprocess
from base64 import b64encode
from deployer.config import ConfigStack
from deployer.utils import resolve_include
import yaml
import optparse

def _resolve_include(value, base_dir):
    """
    resolve include-*:// style links in the way that
    juju-deployer does.  I cut and paste this code for now
    since it was a bit burried in a method.  The goal is
    to move this into amulet, I really don't want to maintain
    this here.
    """
    for include_type in ["file", "base64"]:
        if (not isinstance(value, str)
            or not value.startswith(
                "include-%s://" % include_type)):
            continue
        _, fname = value.split("://", 1)
        include_path = resolve_include(fname, [base_dir])
        with open(include_path) as fh:
            result = fh.read().strip()
            if include_type == "base64":
                result = b64encode(result)
            return result
    return value


def load_deployer_config(yaml_file, deployer_target="landscape"):
    """
    Load a deployer config, resolving all deployer indirections.

    The resulting structure will be a single-stanza, named after
    the current juju environment.  i.e., all 'inherit' directives
    will also be resolved.  This file would be portable and could be
    pasted to someone else for debugging.
    """
    config_dir = os.path.dirname(yaml_file)
    print config_dir
    config = ConfigStack([yaml_file])
    config.load()
    deployment = config.get(deployer_target)
    data = deployment.data

    if "relations" not in data:
        data["relations"] = {}

    for service_name, service in data["services"].iteritems():
        if "options" in service:
            for key, value in service["options"].items():
                service["options"][key] = _resolve_include(value, config_dir)

    # FIXME: This is only needed since amulet switches your environment
    #        if you pass in a config.  There are ways to break this
    #        parsing (like including a quote in your environment name).
    output = subprocess.check_output(['juju', 'env']).strip()
    # Current environment: "andreas-canonistack2" (from JUJU_ENV)
    # <= Juju 1.16
    if output.startswith("Current environment: "):
        environment_name = output.split()[2].strip('"')
    else:
        environment_name = output
    return {environment_name: data}


def set_landscape_repository_url(config, url):
    """Change deployer config to use different repository"""
    pass


def get_options():
    """Parse check and retrieve arguments and options."""
    description = "Generate a fully-formed juju-deployer file"
    parser = optparse.OptionParser(description=description)
    parser.add_option(
        "-r", "--repository-url",
        dest="repository_url",
        help="URL of the LDS repository to use. Use this to also "
        "implicitly select which LDS version you want.")
    parser.add_option(
        "-t", "--deployer-target",
        dest="deployer_target",
        default="landscape",
        help="Deployer target to extract and use for testing")
    options, args = parser.parse_args()

    if len(args) != 1:
        parser.print_help()
        sys.exit(1)

    return options, args


def main():
    options, args = get_options()
    # break the modeline print line so it isn't interpreted here
    print "# Vim seems to have a cow with the long yaml lines, hack for now"
    print "# See: https://stackoverflow.com/questions/20663169"
    print "# vim" + ":syntax=off"
    print "# you need set modeline for this to work"
    config = load_deployer_config(args[0], deployer_target=options.deployer_target)
    if options.repository_url:
        set_landscape_repository_url(config, options.repository_url)
    print yaml.dump(config, default_flow_style=False)


if __name__ == '__main__':
    main()
