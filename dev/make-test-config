#!/usr/bin/python2.7
"""
Write out a 'translated' configuration file.  That is:

  - put everything in one section
  - resolve 'include-*://' style links
  - name the yaml section after the current 'JUJU_ENV'

This is to workaround some amulet/deployer quirks.  It's in a file
since deployer libs are py2, and amulet is py3
"""


import os
import sys
import subprocess
from base64 import b64encode
from deployer.config import ConfigStack
from deployer.utils import resolve_include
import yaml

def _resolve_include(value, base_dir):
    """
    resolve include-*:// style links in the way that
    juju-deployer does.  I cut and paste this code for now
    since it was a bit burried in a method.  The goal is
    to move this into amulet, I really don't want to maintain
    this here.
    """
    for include_type in ["file", "base64"]:
        if (not isinstance(value, str)
            or not value.startswith(
                "include-%s://" % include_type)):
            continue
        _, fname = value.split("://", 1)
        include_path = resolve_include(fname, [base_dir])
        with open(include_path) as fh:
            result = fh.read().strip()
            if include_type == "base64":
                result = b64encode(result)
            return result
    return value


def load_deployer_config(yaml_file, deployer_target="landscape"):
    """
    return a deployer config file in yaml format
    """
    config_dir = os.path.dirname(yaml_file)
    print config_dir
    config = ConfigStack([yaml_file])
    config.load()
    deployment = config.get("landscape")
    data = deployment.data

    if "relations" not in data:
        data["relations"] = {}

    for service_name, service in data["services"].iteritems():
        if "options" in service:
            for key, value in service["options"].items():
                service["options"][key] = _resolve_include(value, config_dir)

    # FIXME: This is only needed since amulet switches your environment
    #        if you pass in a config.  There are ways to break this
    #        parsing (like including a quote in your environment name).
    output = subprocess.check_output(['juju', 'env']).strip()
    # Current environment: "andreas-canonistack2" (from JUJU_ENV)
    # <= Juju 1.16
    if output.startswith("Current environment: "):
        environment_name = output.split()[2].strip('"')
    else:
        environment_name = output
    return yaml.dump({environment_name: data})

    output = subprocess.check_output(['juju', 'env']).strip().split()
    env = output[2].strip('"')
    return yaml.dump({env: data}, Dumper=yaml.Dumper)

if len(sys.argv) < 2:
    print "Usage: %s PATH_TO_CONFIG [DEPLOYER_TARGET]\n" % sys.argv[0]
    print " * DEPLOYER_TARGET default is 'landscape'"
    sys.exit(1)
else:
    # break the modeline print line so it isn't interpreted here
    print "# Vim seems to have a cow with the long yaml lines, hack for now"
    print "# See: https://stackoverflow.com/questions/20663169"
    print "# vim" + ":syntax=off"
    print "# you need set modeline for this to work"
    print load_deployer_config(*sys.argv[1:]),
