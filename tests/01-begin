#!/usr/bin/python3
"""
This test creates a real landscape deployment, and runs some checks against it.
"""

from subprocess import check_output, STDOUT
import shutil
import logging
import amulet
import yaml
import sys
from time import sleep
import json

#TODO:
# - amulet bug: juju-deployer include directives don't take path into
#               consideration
# - amulet bug: couldn't get sentries to work... need to retry
# - amulet bug: juju environment is assumed from the data file.
# - amulet bug: proper juju deployer files are assembled from multiple
#               stanzas, amulet doesn't appear to support this.
# - amulet bug: it chokes if the config file doesn't contain all stanzas

class LandscapeTestError(Exception):
    """Exception thrown by test methods."""

    def __init__(self, msg, output):
        self.msg = msg
        self.output = output

class ServiceNotFound(Exception):
    """
    Exception thrown if a specified service cannot be found in the
    deployment.
    """

    def __init__(self, service_name):
        self.service_name = service_name

class LandscapeLiveTests(object):
    """
    Class hosting all the tests we want to run against a given Landscape
    deployment.
    """

    def __init__(self, deployment):
        self.deployment = deployment
        self.status = self._juju_status()
        self.frontend = self._find_service("apache2")
    
    def _juju_status(self):
        """Return a juju status structure."""
        cmd = ["juju", "status", "--format=json"]
        output = check_output(cmd).decode('utf-8').strip()
        return json.loads(output)

    def _find_service(self, service_name):
        """
        Given a service name, return the public address of its first unit.
        Doesn't handle subordinates, sorry.
        """
        services = self.status["services"]
        if service_name not in services:
            raise ServiceNotFound(service_name)
        service = services[service_name]
        units = service.get("units", {})
        unit_keys = list(sorted(units.keys()))
        if unit_keys:
            public_address = units[unit_keys[0]].get("public-address", "")
            logging.info("Service %s can be found at %s" %
                         (service_name, public_address))
            return public_address
        else:
            raise ServiceNotFound(service_name)

    def run_tests(self):
        """Run all the tests."""
        tests = filter(callable, [getattr(self,i)
                       for i in dir(self) if i.startswith('test_')])
        for test in tests:
            test_name = test.__name__.lstrip("test_")
            logging.info("Running test %s" % test_name)
            test()

    def check_url(self, url, good_content, post_data=None, header=None,
                  interval=10, attempts=60):
        """
        Polls the given URL looking for the specified good_content. Raises
        LandscapeTestError if the content cannot be found in time, otherwise
        returns True.

        @param url: URL to poll
        @param good_content: string we are looking for
        @param post_data: optional POST data string
        @param header: optional request header string
        @param interval: number of seconds between polls
        @param attempts: how many times we should poll
        """
        cmd = ["curl", url, "-k", "-L", "-s"]
        if post_data:
            cmd.extend(["-d", post_data])
        if header:
            cmd.extend(["-H", header])
        while True: 
            output = check_output(cmd).decode('utf-8').strip()
            if good_content in output:
                return True
            attempts = attempts - 1
            if attempts == 0:
                break
            sleep(interval)
        raise LandscapeTestError(
            "Didn't find \"%s\" in output" % good_content, output)
            
    def test_app(self):
        """
        Verifies that the APP service is reachable and that it presents the new
        user form.
        """
        good_content = "New user - Landscape"
        self.check_url("https://%s/" % self.frontend, good_content)

    def test_msg(self):
        """
        Verifies that the MSG service is reachable and that it responds
        correctly to requests.
        """
        good_content = "ds8:messagesl;s11:server-uuid"
        post_data = "ds8:messagesl;s22:next-expected-sequencei0;s8:sequencei0;;"
        header = "X-MESSAGE-API: 3.1"
        self.check_url("https://%s/message-system" % self.frontend,
                       good_content, post_data, header)

    def test_ping(self):
        """
        Verifies that the PING service is reachable and that it responds
        correctly to a ping request without an ID.
        """
        good_content = "ds5:errors19:provide insecure_id;"
        self.check_url("http://%s/ping" % self.frontend, good_content)

    def test_ssh(self):
        """
        Verifies that the landscape/0 unit can be reached via ssh.
        """
        good_content = "buffers/cache"
        output = check_output(["juju", "ssh", "landscape/0", "free -m"],
                              stderr=STDOUT).decode('utf-8')
        if not good_content in output:
            raise LandscapeTestError("Didn't find \"%s\" in output", output)


def deploy(config):
    logging.info("Testing Basic Deployment of the Landscape Charm Stack")
    logging.basicConfig(
        level='DEBUG', format='%(asctime)s %(levelname)s %(message)s')

    d = amulet.Deployment(sentries=False)
    d.load(config)

    d.setup(timeout=2000)
    return d


def main():
    logging.basicConfig(
        level='DEBUG', format='%(asctime)s %(levelname)s %(message)s')
    with open("test-config.yaml", "r") as myfile:
        data = yaml.load(myfile.read())
    deployment = deploy(data)

    try:
        live_tests = LandscapeLiveTests(deployment)
        live_tests.run_tests()
    except LandscapeTestError as e:
        logging.error(
            "Test %s failed. Output:\n%s" % (e.test_name,e.output))
    except ServiceNotFound as e:
        logging.error("Couldn't find service %s in this deployment." %
                    e.service_name)
    else:
        logging.info("Tests succeeded.")
        sys.exit(0)

    sys.exit(1)


main()
