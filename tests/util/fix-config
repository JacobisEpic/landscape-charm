#!/usr/bin/python2.7
"""
Write out a 'translated' configuration file.  That is:

  - put everything in one section
  - resolve 'include-*://' style links
  - name the yaml section after the current 'JUJU_ENV'

This is to workaround some amulet/deployer quirks.  It's in a file
since deployer libs are py2, and amulet is py3
"""


import sys
import subprocess
from base64 import b64encode
from deployer.config import ConfigStack
from deployer.utils import resolve_include

def _resolve_include(value):
    """
    resolve include-*:// style links in the way that
    juju-deployer does.  I cut and paste this code for now
    since it was a bit burried in a method.  The goal is
    to move this into amulet, I really don't want to maintain
    this here.
    """
    for include_type in ["file", "base64"]:
        if (not isinstance(value, str)
            or not value.startswith(
                "include-%s://" % include_type)):
            continue
        include, fname = value.split("://", 1)
        include_path = resolve_include(fname, ".")
        with open(include_path) as fh:
            result = fh.read()
            if include_type == "base64":
                result = b64encode(result)
            return result


def load_deployer_config(yaml_file):
    """
    return a deployer config file in a format that amulet expects
    """
    config = ConfigStack([yaml_file])
    config.load()
    deployment = config.get("landscape")
    data = deployment.data

    if "relations" not in data:
        data["relations"] = {}

    for service_name, service in data["services"].iteritems():
        if "options" in service:
            for key, value in service["options"].items():
                service["options"][key] = _resolve_include(value)

    # FIXME: This is only needed since amulet switches your environment
    #        if you pass in a config.  There are ways to break this
    #        parsing (like including a quote in your environment name).
    output = subprocess.check_output(['juju', 'env']).split()
    env = output[2].strip('"')

    return {env: data}


# Arguments
# 1: path to the deployer config
if len(sys.argv) < 2:
    print "Usage: %s PATH_TO_CONFIG" % sys.argv[0]
    sys.exit(1)
else:
    print load_deployer_config(sys.argv[1])
